/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2023-12-12 09:34:55 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.src;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import java.net.UnknownHostException;
import java.util.Properties;
import java.io.*;
import java.text.SimpleDateFormat;
import java.text.DateFormat;
import java.util.*;
import com.pointel.ivr.util.LoggerConfigure;
import com.genesyslab.studio.backendlogic.BackendLogManager;
import org.apache.logging.log4j.Logger;
import java.net.InetAddress;
import org.json.JSONObject;
import org.json.JSONException;
import org.json.JSONObject;
import com.genesyslab.studio.backendlogic.GVPHttpRequestProcessor;
import java.util.Map;
import org.apache.logging.log4j.Logger;
import com.genesyslab.studio.backendlogic.BackendLogManager;

public final class LoggerPropConfig_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {


   public JSONObject performLogic(JSONObject state, Map<String, String> additionalParams) throws Exception {
	JSONObject result = new JSONObject();
	JSONObject appSession = new JSONObject();
	try {
		// Reading the Properties file
		Properties ivrLoggerProps = new Properties();
		Properties appInfoProps = new Properties();
		ivrLoggerProps.load(new FileInputStream(new File(getServletConfig().getServletContext().getRealPath("/Config/Logger.properties"))));
		appInfoProps.load(new FileInputStream(new File(getServletConfig().getServletContext().getRealPath("/Config/AppInfo.properties"))));
		// Getting the key
		String connectionID = state.getString("CallUUID").trim();
		String sessionID = state.getString("GVPSessionID").split(";")[0];
		Context contvar = (Context) new InitialContext().lookup("java:comp/env");
		String env = (String) contvar.lookup("env");
		String ivrAppName = appInfoProps.getProperty("IVRAppName");
		String transactionNumberDays = appInfoProps.getProperty(env + ".TransactionNumberDays");
		String ivrAppServer = InetAddress.getLocalHost().getHostName();
		String arrivalTime = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss").format(new Date());
		appSession.put("ARRIVALTIME", arrivalTime);
		appSession.put("environment", env);
		appSession.put("Language", "English");
		appSession.put("IVRAppName", ivrAppName);
		appSession.put("ConnID", connectionID);
		appSession.put("CED", "");
		// LoggerConfigure
		Properties loggerProps = new Properties();
		loggerProps.put("AppLogger_filePath", ivrLoggerProps.getProperty(env + ".AppLogger_filePath"));
		loggerProps.put("AppLogger_LoggerName", ivrLoggerProps.getProperty(env + ".AppLogger_LoggerName"));
		loggerProps.put("AppLogger_fileSize", ivrLoggerProps.getProperty(env + ".AppLogger_fileSize"));
		loggerProps.put("AppLogger_fileCount", ivrLoggerProps.getProperty(env + ".AppLogger_fileCount"));
		loggerProps.put("AppLogger_level", ivrLoggerProps.getProperty(env + ".AppLogger_level"));
		loggerProps.put("AppLogger_envType", ivrLoggerProps.getProperty(env + ".AppLogger_envType"));
		loggerProps.put("AppLogger_pattern", ivrLoggerProps.getProperty(env + ".AppLogger_pattern"));
		loggerProps.put("DbLogger_filePath", ivrLoggerProps.getProperty(env + ".DbLogger_filePath"));
		loggerProps.put("DbLogger_LoggerName", ivrLoggerProps.getProperty(env + ".DbLogger_LoggerName"));
		loggerProps.put("DbLogger_fileSize", ivrLoggerProps.getProperty(env + ".DbLogger_fileSize"));
		loggerProps.put("DbLogger_fileCount", ivrLoggerProps.getProperty(env + ".DbLogger_fileCount"));
		loggerProps.put("DbLogger_level", ivrLoggerProps.getProperty(env + ".DbLogger_level"));
		loggerProps.put("DbLogger_envType", ivrLoggerProps.getProperty(env + ".DbLogger_envType"));
		loggerProps.put("DbLogger_pattern", ivrLoggerProps.getProperty(env + ".DbLogger_pattern"));
		LoggerConfigure.loggerConfiguration(loggerProps);
		appSession.put("LoggerName", ivrLoggerProps.getProperty(env + ".AppLogger_LoggerName"));
		Logger debugLogger = BackendLogManager.getLogger(ivrLoggerProps.getProperty(env + ".AppLogger_LoggerName"));
		Date timeStamp = new Date();
		String loggingCommonFormat = "{" + sessionID + "}," + connectionID + ",";
		//Log Starting
		debugLogger.debug(loggingCommonFormat + "******************************************");
		debugLogger.debug(loggingCommonFormat + "*********** START OF THE CALL ************");
		debugLogger.debug(loggingCommonFormat + "*********** Main Callflow  ***************");
		debugLogger.debug(loggingCommonFormat + "*********** LoggerPropConfig.jsp  ********");
		try {
			//Getting MCP_IP & HostName
			String mcpIp = state.getString("mcp_IP").split(";")[0].split("@")[1].substring(0,state.getString("mcp_IP").split(";")[0].split("@")[1].indexOf(":"));
			String mcpHostName = InetAddress.getByName(mcpIp).getHostName();
			debugLogger.debug(loggingCommonFormat + "Environment : " + env);
			debugLogger.debug(loggingCommonFormat + "IVRApp : " + ivrAppName);
			debugLogger.debug(loggingCommonFormat + "ANI : " + state.getString("ANI").trim());
			debugLogger.debug(loggingCommonFormat + "DNIS : " + state.getString("DNIS").trim());
			debugLogger.debug(loggingCommonFormat + "ConnectionID : " + connectionID);
			debugLogger.debug(loggingCommonFormat + "ConnID : " + state.getString("ELV_CONNID"));
			debugLogger.debug(loggingCommonFormat + "SessionID : " + sessionID);
			debugLogger.debug(loggingCommonFormat + "MCP_IP : " + mcpIp);
			debugLogger.debug(loggingCommonFormat + "MCP_HostName : " + mcpHostName);
			debugLogger.debug(loggingCommonFormat + "IVRAppServer : " + ivrAppServer);
			// Getting ShortConnID
			String shortConnId = null;
			if (connectionID != null) {
				if (connectionID.length() >= 8)
					shortConnId = connectionID.substring(connectionID.length() - 9, connectionID.length());
				else
					shortConnId = connectionID.substring(0, connectionID.length());
			}
			if ((shortConnId != null) && (shortConnId.length() > 0)) {
				debugLogger.debug(loggingCommonFormat + "ShortConnId : " + shortConnId);
				appSession.put("shortConnId", shortConnId);
			}
			// Error Log Info
		} catch (Exception exc) {
			debugLogger.error(loggingCommonFormat + "Exception in LoggerPropConfig.jsp : " + exc);
		}
	} catch (Exception e) {
		System.out.println("Exception in LoggerPropConfig.jsp : " + e);
	}
	result.put("appSession", appSession);
	return result;
       };
   

/* public JSONObject performLogic(JSONObject state, Map<String, String> additionalParams)
{
	return new JSONObject();
} */

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/src/../include/backend.jspf", Long.valueOf(1641391982000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.naming.InitialContext");
    _jspx_imports_classes.add("java.util.Properties");
    _jspx_imports_classes.add("com.pointel.ivr.util.LoggerConfigure");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("java.net.UnknownHostException");
    _jspx_imports_classes.add("java.net.InetAddress");
    _jspx_imports_classes.add("com.genesyslab.studio.backendlogic.BackendLogManager");
    _jspx_imports_classes.add("org.json.JSONException");
    _jspx_imports_classes.add("org.apache.logging.log4j.Logger");
    _jspx_imports_classes.add("org.json.JSONObject");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("javax.naming.Context");
    _jspx_imports_classes.add("com.genesyslab.studio.backendlogic.GVPHttpRequestProcessor");
    _jspx_imports_classes.add("java.text.DateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("application/json;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write("\r\n\r\n\r\n\r\n\r\n\r\n");
      out.write('\r');
      out.write('\n');

response.setHeader("Cache-Control", "no-cache");
response.addHeader("X-Frame-Options", "DENY");     // Setting the "DENY" Flag on response object to restrict browsers that support this header from allowing embedding web-pages in a frame

Logger logger = BackendLogManager.getLogger("backEnd");
String output = null;

try {
    // process the post data
    GVPHttpRequestProcessor processor = new GVPHttpRequestProcessor(request);
    processor.parseRequest();
    
    // "state" encapsulates the state variable submitted by the VXML page
    JSONObject state = processor.getState();
    
    // additional parameters that were passed in the namelist
    Map<String, String> additionalParams = processor.getAdditionalParams();
    
    // perform the logic
    JSONObject result = performLogic(state, additionalParams);
    
	output = result.toString();
    
    out.print(output);
    logger.info("Output: " + output);
    
} catch (Exception e) {
    
    //Removed the call to 'e.printstacktrace()' as printing the stack trace of an exception is a bad practice.
    
    //String msg = e.getMessage();
    //if (null != msg){
    //	msg = msg.replace('"', '\'');
    //}
    out.print("An error has occured in the custom backend JSP file");
	logger.error("An error has occured in the custom backend JSP file");
}

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
